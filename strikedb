#!/usr/bin/perl

# Ubuntu /etc/init/tty1.conf
# exec /sbin/getty -i -n -8 38400 -l /usr/local/bin/strike.pl tty1

# TO DO:
# Accept multiple prox readers based on a prox prefix
# Different curl IP for each different prox prefix
# Expand DB to support multiple readers
# Allow configuration to use a local sqlite db or a network MySQL DB
# sqlite version needs the original strike.pl with built in CGI

$|=1;
use strict;
use warnings;
use lib '/home/local/Strike/lib';
use Term::ReadKey;
use Date::Manip;
use Schema;
use LWP::UserAgent;
use Sys::Syslog qw/:standard :macros/;

Date_Init('WorkDayBeg = 07:00', 'WorkDayEnd = 18:00');
my $schema = Schema->connect('DBI:mysql:database=door;host=mysql.cogstonestl.com', 'door', 'door');

$ENV{SYSLOG}=1;

openlog($0, 'pid', LOG_LOCAL0);

if ( $ENV{PIN} ) {
	Strike($ENV{PIN}, $schema->resultset('Door')->search_rs({pin=>$ENV{PIN}}));
} else {
	print "Strike: ";
	ReadMode 2;
	chomp($ENV{RFID} = <STDIN>) or die "No strike\n";
	ReadMode 0;
	Strike($ENV{RFID}, $ENV{RFID} =~ /^PRX/i ? $schema->resultset('Door')->search_rs({user_id=>{'!='=>undef}, sn=>$ENV{RFID}}) : $ENV{RFID});
}

sub Strike {
	my ($input, $rs) = @_;

	$input = '****' if $ENV{PIN};

	local $_ = "Striking $input...";
	syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
	warn "$_\n" if $ENV{DEBUG};

	my ($user_id, $user, $name, $ok, $label, $rfid, $pin);
	if ( ref $rs ) {
		if ( $rs->count == 1 ) {
			my $r = $rs->first;
			($user_id, $user, $ok, $label, $rfid, $pin) = ($r->user_id, $r->user, $r->acl, $r->badge, $r->sn, $r->pin);
			$name = $user->name if $user;
		} elsif ( $rs->count == 0 ) {
			local $_ = "No registration found ($input)";
			syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
			warn "$_\n" if $ENV{DEBUG};
			($user_id, $name, $ok) = (undef, $_, -1);
			$schema->resultset('Door')->search({badge=>{'!='=>undef},sn=>undef}, {rows=>1, order_by=>'badge'})->update({id=>undef, user_id=>undef, acl=>undef, sn=>$input, pin=>undef});
		} else {
			local $_ = "Multiple registrations found ($input)";
			syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
			warn "$_\n" if $ENV{DEBUG};
			($user_id, $name, $ok) = (undef, $_, -1);
		}
	} else {
		local $_ = "Wrong PIN ($input)";
		syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
		warn "$_\n" if $ENV{DEBUG};
		($user_id, $name, $ok) = (undef, $_, -1);
	}

	if ( $ENV{PIN} && $pin && $ENV{PIN} ne $pin ) {
		local $_ = "Wrong PIN ($ENV{PIN})";
		syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
		warn "$_\n" if $ENV{DEBUG};
		$schema->resultset('Log')->create({dt=>\'now()', user_id=>$user_id, message=>$_});
	} elsif ( not defined $name || $user_id == 0 ) {
		local $_ = "Found record but not tied to anyone.  You are probably identifying this card to register it to someone.";
		syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
		warn "$_\n" if $ENV{DEBUG};
	} elsif ( $ok == 1 || ($ok == 2 && Date_IsWorkDay(ParseDate('now'), 1)) ) {  # 7a-6p
		if ( $ENV{NOBUZZ} ) {
			local $_ = "Allow: $name";
			syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
			warn "$_\n" if $ENV{DEBUG};
			$schema->resultset('Log')->create({dt=>\'now()', user_id=>$user_id, message=>$_});
		} else {
			my $ua = LWP::UserAgent->new;
			my $req = HTTP::Request->new(GET => 'http://webrelay.cogstonestl.com/state.xml?relayState=2');
			my $res = $ua->request($req);
			if ( $res->is_success ) {
				local $_ = "Allow: $name";
				syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
				warn "$_\n" if $ENV{DEBUG};
				$schema->resultset('Log')->create({dt=>\'now()', user_id=>$user_id, message=>$_});
			} else {
				local $_ = "Allow (FAILED): $name";
				syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
				warn "$_\n" if $ENV{DEBUG};
				$schema->resultset('Log')->create({dt=>\'now()', user_id=>$user_id, message=>$_});
			}
		}
	} elsif ( $ok == 2 ) {
		local $_ = "Deny After Hours: $name";
		syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
		warn "$_\n" if $ENV{DEBUG};
		$schema->resultset('Log')->create({dt=>\'now()', user_id=>$user_id, message=>$_});
	} elsif ( $ok == 0 ) {
		local $_ = "Deny: $name";
		syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
		warn "$_\n" if $ENV{DEBUG};
		$schema->resultset('Log')->create({dt=>\'now()', user_id=>$user_id, message=>$_});
	} else {
		local $_ = "Deny Unknown Attempt: $name";
		syslog(LOG_INFO|LOG_LOCAL0, $_) if $ENV{SYSLOG};
		warn "$_\n" if $ENV{DEBUG};
		$schema->resultset('Log')->create({dt=>\'now()', user_id=>$user_id, message=>$_});
	}
}
